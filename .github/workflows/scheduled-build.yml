name: Scheduled Build with Change Detection

on:
  workflow_dispatch:
    inputs:
      force_build:
        description: 'Force build regardless of changes'
        required: false
        type: boolean
        default: false
  schedule:
    - cron: '*/5 * * * *'  # Run every 5 minutes for testing
    # For production: '0 2 * * *'  # Run at 2 AM UTC daily

jobs:
  check:
    runs-on: ubuntu-latest
    outputs:
      build_needed: ${{ steps.check_changes.outputs.build_needed }}
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get Previous Workflow Run
      id: get_previous_run
      env:
        GITHUB_TOKEN: ${{ secrets.GH_PAT }}
      run: |
        echo "Fetching previous workflow run..."
        response=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
          "https://api.github.com/repos/${{ github.repository }}/actions/runs?branch=main&status=completed&event=schedule&per_page=2")
        run_id=$(echo "$response" | jq -r '.workflow_runs[1].id')
        if [ "$run_id" == "null" ]; then
          echo "No previous run found. Will trigger build."
          echo "previous_run_id=" >> $GITHUB_OUTPUT
          echo "build_needed=true" >> $GITHUB_OUTPUT
        else
          echo "Found previous run ID: $run_id"
          echo "previous_run_id=$run_id" >> $GITHUB_OUTPUT
        fi

    - name: Download Previous Commit State
      id: download_artifact
      if: steps.get_previous_run.outputs.previous_run_id != ''
      uses: actions/download-artifact@v4
      with:
        name: last-successful-commit
        path: .
        run-id: ${{ steps.get_previous_run.outputs.previous_run_id }}
        github-token: ${{ secrets.GH_PAT }}
      continue-on-error: true

    - name: Get Previous Commit
      id: previous_commit
      run: |
        if [ -f .last-successful-commit ]; then
          PREVIOUS_COMMIT=$(cat .last-successful-commit)
          echo "Previous successful commit: $PREVIOUS_COMMIT"
          echo "previous_commit=$PREVIOUS_COMMIT" >> $GITHUB_OUTPUT
        else
          echo "No previous commit found. Will trigger build."
          echo "previous_commit=" >> $GITHUB_OUTPUT
        fi

    - name: Check for Changes
      id: check_changes
      run: |
        LATEST_COMMIT=$(git rev-parse HEAD)
        echo "Latest commit: $LATEST_COMMIT"
        
        # Check if we have a previous commit to compare against
        if [ -z "${{ steps.previous_commit.outputs.previous_commit }}" ]; then
          echo "No previous commit to compare against. Building."
          echo "build_needed=true" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # Check for any changes in tracked files
        CHANGED_FILES=$(git diff --name-only ${{ steps.previous_commit.outputs.previous_commit }} $LATEST_COMMIT)
        
        if [ -n "$CHANGED_FILES" ]; then
          echo "Changes detected in the following files:"
          echo "$CHANGED_FILES"
          echo "build_needed=true" >> $GITHUB_OUTPUT
        else
          echo "No changes detected."
          echo "build_needed=false" >> $GITHUB_OUTPUT
        fi

    - name: Handle Manual Trigger
      if: github.event_name == 'workflow_dispatch'
      run: |
        if [[ "${{ github.event.inputs.force_build }}" == "true" ]]; then
          echo "Manual trigger with force_build=true detected. Forcing build."
          echo "build_needed=true" >> $GITHUB_OUTPUT
        else
          echo "Manual trigger detected, using change detection result."
        fi

  build:
    needs: check
    if: needs.check.outputs.build_needed == 'true'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Build
      run: |
        echo "Starting build process..."
        # Add your build steps here

  save-state:
    needs: [check, build]
    if: always() && needs.build.result == 'success'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Save Last Successful Commit
      run: |
        LATEST_COMMIT=$(git rev-parse HEAD)
        echo "$LATEST_COMMIT" > .last-successful-commit
        echo "Saved commit: $LATEST_COMMIT"

    - name: Upload Commit State
      uses: actions/upload-artifact@v4
      with:
        name: last-successful-commit
        path: .last-successful-commit
        include-hidden-files: true
        retention-days: 90
